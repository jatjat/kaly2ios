
load("@build_bazel_rules_swift//swift:swift.bzl", "swift_library")

grpc_stubs = [
        "Sources/Data/Protos/MapService.grpc.swift",
        "Sources/Data/Protos/RobotService.grpc.swift",
        "Sources/Data/Protos/SessionService.grpc.swift"
      ]
proto_models = [
        "Sources/Data/Protos/MapService.pb.swift",
        "Sources/Data/Protos/RobotService.pb.swift",
        "Sources/Data/Protos/SessionService.pb.swift"
]
tools = ["@protobuf//:protoc", "@grpc-swift-repo//:protoc-gen-grpc-swift"]
protos = glob([
        "**/*.proto",
    ])

swift_library(
    name = "data-api",
    srcs = glob(["Sources/DataAPI/**/*.swift"]),
    visibility = ["//visibility:public"],
    module_name = "DataAPI",
    deps = ["//Kaly2iOS/Common:common-api"]
)

swift_library(
    name = "data",
    srcs = glob(["Sources/Data/Clients/**/*.swift","Sources/Data/*.swift"]) + grpc_stubs + proto_models,
    visibility = ["//visibility:public"],
    module_name = "Data",
    deps = ["@grpc-swift-repo//:GRPC", "data-api",
    "@cleanse-repo//:Cleanse",
],
    tags = ["xchammer"],
    # data = [":grpc_stubs"]
)

# go_binary = rule(
#     _go_binary_impl,
#     attrs = {
#         "srcs": attr.label_list(
#             doc = "Source files to compile for the main package of this binary",
#         ),
#     },
#     doc = "Builds an executable program from Go source code",
#     executable = True,
# )

# def _go_binary_impl(ctx):
#     # Declare an output file for the main package and compile it from srcs. All
#     # our output files will start with a prefix to avoid conflicting with
#     # other rules.
#     prefix = ctx.label.name + "%/"
#     main_archive = ctx.actions.declare_file(prefix + "main.a")
#     go_compile(
#         ctx,
#         srcs = ctx.files.srcs,
#         out = main_archive,
#     )

#     # Declare an output file for the executable and link it. Note that output
#     # files may not have the same name as the rule, so we still need to use the
#     # prefix here.
#     executable = ctx.actions.declare_file(prefix + ctx.label.name)
#     go_link(
#         ctx,
#         main = main_archive,
#         out = executable,
#     )

#     # Return the DefaultInfo provider. This tells Bazel what files should be
#     # built when someone asks to build a go_binary rules. It also says which
#     # one is executable (in this case, there's only one).
#     return [DefaultInfo(
#         files = depset([executable]),
#         executable = executable,
#     )]

# genrule(
#     name = "protoc"
#     outs = "libprotoc-gen-grpc-swift.a"
#     cmd = """
    
#     """,
#     srcs = protos,
#     tools = tools,
#     tags = ["xchammer"]
# )

genrule(
    name = "grpc_stubs",
    outs = grpc_stubs,
    cmd = """
    /opt/homebrew/bin/protoc \
    --plugin=$(location @grpc-swift-repo//:protoc-gen-grpc-swift) \
    --grpc-swift_out=Client=true,ExperimentalAsyncClient=true:$(GENDIR) \
    --proto_path=. $(SRCS)
    """,
    srcs = protos,
    exec_tools = tools,
    tags = ["xchammer"],
)

genrule(
    name = "proto_models",
    outs = proto_models,
    cmd = """
    /opt/homebrew/bin/protoc \
    --plugin=$(location @grpc-swift-repo//:protoc-gen-grpc-swift) \
    --swift_out=$(GENDIR) \
    --proto_path=. $(SRCS)
    """,
    srcs = protos,
    exec_tools = tools,
    tags = ["xchammer"],
)
