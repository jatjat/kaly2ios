//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: Shared/Infrastructure/Protos/RobotService.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Ca_Joelathiessen_Kaly2_Proto_RobotServiceClient`, then call methods of this protocol to make API calls.
internal protocol Ca_Joelathiessen_Kaly2_Proto_RobotServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Ca_Joelathiessen_Kaly2_Proto_RobotServiceClientInterceptorFactoryProtocol? { get }

  func createRobot(
    _ request: Ca_Joelathiessen_Kaly2_Proto_CreateRobotRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ca_Joelathiessen_Kaly2_Proto_CreateRobotRequest, Ca_Joelathiessen_Kaly2_Proto_CreateRobotResponse>
}

extension Ca_Joelathiessen_Kaly2_Proto_RobotServiceClientProtocol {
  internal var serviceName: String {
    return "ca.joelathiessen.kaly2.proto.RobotService"
  }

  /// Unary call to CreateRobot
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateRobot.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createRobot(
    _ request: Ca_Joelathiessen_Kaly2_Proto_CreateRobotRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ca_Joelathiessen_Kaly2_Proto_CreateRobotRequest, Ca_Joelathiessen_Kaly2_Proto_CreateRobotResponse> {
    return self.makeUnaryCall(
      path: "/ca.joelathiessen.kaly2.proto.RobotService/CreateRobot",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateRobotInterceptors() ?? []
    )
  }
}

internal protocol Ca_Joelathiessen_Kaly2_Proto_RobotServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'createRobot'.
  func makeCreateRobotInterceptors() -> [ClientInterceptor<Ca_Joelathiessen_Kaly2_Proto_CreateRobotRequest, Ca_Joelathiessen_Kaly2_Proto_CreateRobotResponse>]
}

internal final class Ca_Joelathiessen_Kaly2_Proto_RobotServiceClient: Ca_Joelathiessen_Kaly2_Proto_RobotServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Ca_Joelathiessen_Kaly2_Proto_RobotServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the ca.joelathiessen.kaly2.proto.RobotService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ca_Joelathiessen_Kaly2_Proto_RobotServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Ca_Joelathiessen_Kaly2_Proto_RobotServiceProvider: CallHandlerProvider {
  var interceptors: Ca_Joelathiessen_Kaly2_Proto_RobotServiceServerInterceptorFactoryProtocol? { get }

  func createRobot(request: Ca_Joelathiessen_Kaly2_Proto_CreateRobotRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ca_Joelathiessen_Kaly2_Proto_CreateRobotResponse>
}

extension Ca_Joelathiessen_Kaly2_Proto_RobotServiceProvider {
  internal var serviceName: Substring { return "ca.joelathiessen.kaly2.proto.RobotService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateRobot":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ca_Joelathiessen_Kaly2_Proto_CreateRobotRequest>(),
        responseSerializer: ProtobufSerializer<Ca_Joelathiessen_Kaly2_Proto_CreateRobotResponse>(),
        interceptors: self.interceptors?.makeCreateRobotInterceptors() ?? [],
        userFunction: self.createRobot(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Ca_Joelathiessen_Kaly2_Proto_RobotServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createRobot'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateRobotInterceptors() -> [ServerInterceptor<Ca_Joelathiessen_Kaly2_Proto_CreateRobotRequest, Ca_Joelathiessen_Kaly2_Proto_CreateRobotResponse>]
}
